version: "3.8"

services:
  postgres:
    profiles: ["app", "migration"]
    image: postgres:14.2-alpine
    container_name: postgres
    networks:
      - default
    restart: always
    volumes:
      - ./.data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    healthcheck:
      test: pg_isready -U pg -d addresses
      interval: 20s
      timeout: 20s
      start_period: 10s
      retries: 5
    ports:
      - ${DB_PORT}:${DB_PORT}
  app:
    profiles: ["app"]
    image: app:v${APP_VERSION}
    container_name: app
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./model:/app/model
      - ./dataset:/app/dataset
    networks:
      - default
    restart: always
    environment:
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      APP_HOST: ${APP_HOST}
      APP_PORT: ${APP_PORT}
      APP_VERSION: ${APP_VERSION}
      ALEMBIC_CONFIG: ${ALEMBIC_CONFIG}
    ports:
      - ${APP_PORT}:${APP_PORT}
    depends_on:
      postgres:
        condition: service_healthy
  migrate:
    profiles: ["migration"]
    image: app:v${APP_VERSION}
    container_name: migrate
    build:
      context: .
      dockerfile: Dockerfile
    command: alembic upgrade head
    networks:
      - default
    environment:
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASS: ${DB_PASS}
      APP_HOST: ${APP_HOST}
      APP_PORT: ${APP_PORT}
      APP_VERSION: ${APP_VERSION}
      ALEMBIC_CONFIG: ${ALEMBIC_CONFIG}
    depends_on:
      postgres:
        condition: service_healthy
